name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.21'

jobs:
  # Lint and Security Scan
  lint:
    name: Lint and Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  # Run Tests
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test123
          POSTGRES_USER: testuser
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: go mod download
      
    - name: Run tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: testuser
        DB_PASSWORD: test123
        DB_NAME: test_db
        DB_SSLMODE: disable
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ""
        REDIS_DB: 0
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "❌ Test coverage ${COVERAGE}% is below 70% threshold"
          exit 1
        fi
        echo "✅ Test coverage ${COVERAGE}% meets threshold"
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests

  # Build and Push Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployments/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image name
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context
        
    - name: Deploy to Development
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install savannah-backend-dev ./deployments/helm \
          --namespace development \
          --create-namespace \
          --set image.repository=${{ needs.build.outputs.image }} \
          --set image.tag=${{ github.sha }} \
          --set app.environment=development \
          --set postgresql.auth.password="${{ secrets.DB_PASSWORD_DEV }}" \
          --set app.oidc.clientID="${{ secrets.OIDC_CLIENT_ID_DEV }}" \
          --set app.sms.username="${{ secrets.SMS_USERNAME_DEV }}" \
          --wait --timeout=10m
          
    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=savannah-backend -n development --timeout=300s
        DEV_URL=$(kubectl get ingress savannah-backend-dev -n development -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "localhost:8080")
        curl -f http://${DEV_URL}/health || exit 1

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3  
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context
        
    - name: Run Database Migration
      run: |
        export KUBECONFIG=kubeconfig
        kubectl create job migration-$(date +%s) --from=cronjob/migration -n production
        kubectl wait --for=condition=complete job/migration-$(date +%s) -n production --timeout=300s
        
    - name: Deploy to Production
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install savannah-backend ./deployments/helm \
          --namespace production \
          --create-namespace \
          --set image.repository=${{ needs.build.outputs.image }} \
          --set image.tag=${{ github.event.release.tag_name }} \
          --set app.environment=production \
          --set replicaCount=3 \
          --set postgresql.auth.password="${{ secrets.DB_PASSWORD_PROD }}" \
          --set app.oidc.clientID="${{ secrets.OIDC_CLIENT_ID_PROD }}" \
          --set app.sms.username="${{ secrets.SMS_USERNAME_PROD }}" \
          --wait --timeout=15m
          
    - name: Health Check
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=savannah-backend -n production --timeout=600s
        PROD_URL=$(kubectl get ingress savannah-backend -n production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        for i in {1..10}; do
          if curl -f https://${PROD_URL}/health; then
            echo "✅ Production health check passed"
            exit 0
          fi
          echo "⏳ Waiting for production deployment... (${i}/10)"
          sleep 30
        done
        echo "❌ Production health check failed"
        exit 1
        
    - name: Rollback on Failure
      if: failure()
      run: |
        export KUBECONFIG=kubeconfig
        helm rollback savannah-backend -n production
        echo "❌ Deployment failed, rolled back to previous version"

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'